package com.vpcloud.shiro.controller.web;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authz.annotation.RequiresGuest;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.vpcloud.shiro.pojo.Role;
import com.vpcloud.shiro.service.ResourceService;
import com.vpcloud.shiro.service.RoleService;

@Controller
public class ViewController {
	@Resource
	private RoleService roleService;
	
	@Resource
	private ResourceService resourceService;

	
	@RequestMapping("/login")
	public String loginForm(HttpServletRequest request,Model model){
        String name = (String) request.getAttribute("shiroLoginFailure");
		String error = null;
		if(UnknownAccountException.class.getName().equals(name)){
			 error = "用户名/密码错误";
		}else if (IncorrectCredentialsException.class.getName().equals(name)){
			error = "用户名/密码错误";
		}else if(name != null) {
            error = "其他错误：" + name;
        }
		model.addAttribute("error", error);
		return "login";
	}
	@RequestMapping("/")
	public String getTest(){
		return "/user/list";
	}
	
	@RequiresPermissions("role:view")
	@RequestMapping("/role/list")
	public String getRole(Model model){
		List<Role> rolelist = roleService.findAll();
		for(int i=0;i<rolelist.size();i++)
		{
			List<Long> resourcesid = rolelist.get(i).getResourceIds();
//			System.out.println(resourcesid.size());
			ArrayList<String> resourcename = new ArrayList<String>();
			for(int j = 0;j<resourcesid.size();j++)
			{
				resourcename.add(j, resourceService.findOne(resourcesid.get(j)).getName());
			}
			rolelist.get(i).setResourcename(resourcename);
		}
		model.addAttribute("AllRoleList",rolelist);
		model.addAttribute("Rescourcelist", resourceService.findAll());
		return "/role/list";
	}

	@RequiresPermissions("role:create")
    @RequestMapping(value = "/role/create", method = RequestMethod.POST)
    public String create(Role role, RedirectAttributes redirectAttributes) {
		System.out.println(role.toString());
		roleService.createRole(role);
        redirectAttributes.addFlashAttribute("msg", "新增成功");
        return "redirect:/role/list";
    }
	
    @RequiresPermissions("role:delete")
    @RequestMapping(value = "/role/{id}/delete", method = RequestMethod.GET)
    public String DeleteRole(@PathVariable("id") Long id, Model model) {
        roleService.deleteRole(id);
        return "redirect:/role/list";
    }
    

    @RequiresPermissions("role:update")
    @RequestMapping(value = "/role/update", method = RequestMethod.POST)
    public String UpdateRole(Role role, RedirectAttributes redirectAttributes) {
    	System.out.println(role.toString());
		roleService.updateRole(role);
        return "redirect:/role/list";
    }
    

	@RequiresGuest
	@RequestMapping("/hello")
	public String testAdmin(){
		System.out.println("权限测试...");
		return "test";
	}

}
